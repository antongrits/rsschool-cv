"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ruleName = exports.meta = exports.messages = exports["default"] = void 0;
var _blockString = _interopRequireDefault(require("../../utils/blockString"));
var _nextNonCommentNode = _interopRequireDefault(require("../../utils/nextNonCommentNode"));
var _rawNodeString = _interopRequireDefault(require("../../utils/rawNodeString"));
var _report = _interopRequireDefault(require("../../utils/report"));
var _ruleMessages = _interopRequireDefault(require("../../utils/ruleMessages"));
var _validateOptions = _interopRequireDefault(require("../../utils/validateOptions"));
var _whitespaceChecker = _interopRequireDefault(require("../../utils/whitespaceChecker"));
var _typeGuards = require("../../utils/typeGuards");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var ruleName = "declaration-block-semicolon-newline-after";
exports.ruleName = ruleName;
var messages = (0, _ruleMessages["default"])(ruleName, {
  expectedAfter: function expectedAfter() {
    return "Expected newline after \";\"";
  },
  expectedAfterMultiLine: function expectedAfterMultiLine() {
    return "Expected newline after \";\" in a multi-line declaration block";
  },
  rejectedAfterMultiLine: function rejectedAfterMultiLine() {
    return "Unexpected newline after \";\" in a multi-line declaration block";
  }
});
exports.messages = messages;
var meta = {
  url: "https://github.com/firefoxic/stylelint-codeguide/blob/main/lib/rules/declaration-block-semicolon-newline-after/README.md",
  fixable: true
};

/** @type {import('stylelint').Rule} */
exports.meta = meta;
var rule = function rule(primary, _secondaryOptions, context) {
  var checker = (0, _whitespaceChecker["default"])("newline", primary, messages);
  return function (root, result) {
    var validOptions = (0, _validateOptions["default"])(result, ruleName, {
      actual: primary,
      possible: ["always", "always-multi-line", "never-multi-line"]
    });
    if (!validOptions) {
      return;
    }
    root.walkDecls(function (decl) {
      // Ignore last declaration if there's no trailing semicolon
      var parentRule = decl.parent;
      if (!parentRule) {
        throw new Error("A parent node must be present");
      }
      if (!(0, _typeGuards.isAtRule)(parentRule) && !(0, _typeGuards.isRule)(parentRule)) {
        return;
      }
      if (!parentRule.raws.semicolon && parentRule.last === decl) {
        return;
      }
      var nextNode = decl.next();
      if (!nextNode) {
        return;
      }

      // Allow end-of-line comment
      var nodeToCheck = (0, _nextNonCommentNode["default"])(nextNode);
      if (!nodeToCheck) {
        return;
      }
      checker.afterOneOnly({
        source: (0, _rawNodeString["default"])(nodeToCheck),
        index: -1,
        lineCheckStr: (0, _blockString["default"])(parentRule),
        err: function err(m) {
          if (context.fix) {
            if (primary.startsWith("always")) {
              var index = nodeToCheck.raws.before.search(/\r?\n/);
              nodeToCheck.raws.before = index >= 0 ? nodeToCheck.raws.before.slice(index) : context.newline + nodeToCheck.raws.before;
              return;
            }
            if (primary === "never-multi-line") {
              nodeToCheck.raws.before = "";
              return;
            }
          }
          (0, _report["default"])({
            message: m,
            node: decl,
            index: decl.toString().length + 1,
            result: result,
            ruleName: ruleName
          });
        }
      });
    });
  };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
var _default = rule;
exports["default"] = _default;