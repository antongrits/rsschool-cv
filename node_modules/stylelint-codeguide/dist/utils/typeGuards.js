"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasSource = hasSource;
exports.isAtRule = isAtRule;
exports.isComment = isComment;
exports.isDeclaration = isDeclaration;
exports.isRoot = isRoot;
exports.isRule = isRule;
exports.isValueFunction = isValueFunction;
/** @typedef {import('postcss').Node} Node */
/** @typedef {import('postcss').Node} NodeSource */

/**
 * @param {Node} node
 * @returns {node is import('postcss').Root}
 */
function isRoot(node) {
  return node.type === "root";
}

/**
 * @param {Node} node
 * @returns {node is import('postcss').Rule}
 */
function isRule(node) {
  return node.type === "rule";
}

/**
 * @param {Node} node
 * @returns {node is import('postcss').AtRule}
 */
function isAtRule(node) {
  return node.type === "atrule";
}

/**
 * @param {Node} node
 * @returns {node is import('postcss').Comment}
 */
function isComment(node) {
  return node.type === "comment";
}

/**
 * @param {Node} node
 * @returns {node is import('postcss').Declaration}
 */
function isDeclaration(node) {
  return node.type === "decl";
}

/**
 * @param {import('postcss-value-parser').Node} node
 * @returns {node is import('postcss-value-parser').FunctionNode}
 */
function isValueFunction(node) {
  return node.type === "function";
}

/**
 * @param {Node} node
 * @returns {node is (Node & {source: NodeSource})}
 */
function hasSource(node) {
  return Boolean(node.source);
}