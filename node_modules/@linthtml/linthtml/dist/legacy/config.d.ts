import { LegacyRuleDefinition, LegacyRuleOption } from "../read-config";
/**
 * The config object stores all possible rules and options and manages
 * dependencies based on which options are enabled.
 * As it runs, it updates the subscribers array for each rule to indicate
 * the active rules and options depending on it.
 */
export default class Config {
    options: {
        [key: string]: LegacyRuleOption;
    };
    rulesMap: {
        [key: string]: LegacyRuleDefinition;
    };
    constructor(rules: LegacyRuleDefinition[]);
    /**
     * Get a rule by name.
     */
    getRule(ruleName: string): LegacyRuleDefinition;
    /**
     * Add a rule.
     * @param {Object} rule
     * @param {string} rule.name
     * @param {string} [rule.on="dom"] - The rules called by rule.
     * @param {string[]} [rule.options] - Options to add with the rule.
     * Options in this list that have no name use the rule's name.
     * @memberof Config
     */
    addRule(rule: LegacyRuleDefinition): void;
    /**
     * Check if the provided string match an existing option
     */
    hasOption(name: string): boolean;
    /**
     * Remove a rule by name.
     */
    removeRule(ruleName: string): void;
    /**
     * Return a list of all rules.
     */
    getAllRules(): LegacyRuleDefinition[];
    /**
     * Add an option.
     */
    addOption(option: LegacyRuleOption): void;
    /**
     * Remove an option by name.
     */
    removeOption(optionName: string): void;
    /**
     * Set the values of all options.
     * Values will be replaced with parsed versions.
     */
    initOptions(opts: Record<string, unknown>): void;
    /**
     * Set an option's value given the option name.
     * @param {string} optionName
     * @param value - The new value. Only its truthiness is used.
     * @returns The value, possibly parsed according to the option.
     * @memberof Config
     */
    setOption(optionName: string, value: unknown): unknown;
    /**
     * Update rule subscriptions according to a new option value.
     */
    setOptionObj(option: LegacyRuleOption, value: unknown): void;
    onAllSubs(obj: LegacyRuleOption, subs: string[], action: (rule: LegacyRuleDefinition, sub: LegacyRuleOption | LegacyRuleDefinition) => void): void;
    activateRule(rule: LegacyRuleDefinition): void;
    addSubscriber(rule: LegacyRuleDefinition, sub: LegacyRuleOption | LegacyRuleDefinition): void;
    deactivateRule(rule: LegacyRuleDefinition): void;
    removeSubscriber(rule: LegacyRuleDefinition, sub: LegacyRuleOption | LegacyRuleDefinition): void;
}
//# sourceMappingURL=config.d.ts.map