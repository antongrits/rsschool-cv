import Issue from "../issue";
import Config from "./config";
import { Comment, Range } from "@linthtml/dom-utils/lib/dom_elements";
export interface InlineConfigIndex {
    [key: string]: unknown;
    rules?: any[];
    end: number;
}
/**
 * An inline configuration class is created to hold each inline configuration
 * and report back what the options should be at a certain index.
 */
export default class InlineConfig {
    config: Config;
    private indexConfigs;
    private previous;
    current: InlineConfigIndex;
    /**
     * Creates an instance of InlineConfig.
     * @param {import('./config')} config - an option parser.
     * If not given here, it must be set with inlineConfig.reset(basis).
     */
    constructor(config: Config);
    /**
     * Reset the current opts to the basis. if newBasis is supplied, use that as our new basis.
     */
    reset(newBasis: InlineConfigIndex): void;
    setOption(name: string, value: unknown, previous: InlineConfigIndex): void;
    /**
     * Apply the given configuration to this.current. Returns true if the operation resulted in any changes, false otherwise.
     */
    applyConfig(config: InlineConfigIndex): void;
    /**
     * Get the options object to use at this index. Indices must be given in order, or an error is thrown (much speedier).
     * If you must get them out of order, use 'reset' first. Sets the opts to this.current.
     */
    getOptsAtIndex(newIndex: number): void;
    /**
     * Add the config when it was given to us from feedComment.
     */
    addConfig(config: InlineConfigIndex): void;
    /**
     * Take the comment node and check it for the proper structure.
     * Add it to our array indexConfigs.
     * Return a list of issues encountered.
     */
    feedComment(node: Comment): Issue[];
    /**
     * Accept an attribute and return either a parsed config pair object
     * or an error string.
     *
     * @param {string} name - The attribute name.
     * @param {string} value - The attribute raw value.
     * @param {Range} pos
     * @returns
     * @memberof InlineConfig
     */
    parsePair(name: string, value: string, pos: Range): Issue | {
        type: string;
        name: string;
        value: any;
    };
}
//# sourceMappingURL=inline_config.d.ts.map