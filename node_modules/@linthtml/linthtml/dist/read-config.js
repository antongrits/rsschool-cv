"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.get_module_path = exports.find_local_config = exports.config_from_path = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const cosmiconfig_1 = require("cosmiconfig");
const global_modules_1 = tslib_1.__importDefault(require("global-modules"));
const resolve_from_1 = tslib_1.__importDefault(require("resolve-from"));
const custom_errors_1 = tslib_1.__importDefault(require("./utils/custom-errors"));
const IS_TEST = process.env.NODE_ENV === "test";
const STOP_DIR = IS_TEST ? path_1.default.resolve(__dirname, "..") : undefined;
function get_module_path(basedir, module_name) {
    // 1. Try to resolve from the provided directory
    // 2. Try to resolve from `process.cwd`
    // 3. Try to resolve from global `node_modules` directory
    let path = resolve_from_1.default.silent(basedir, module_name);
    if (!path) {
        path = resolve_from_1.default.silent(process.cwd(), module_name);
    }
    if (!path) {
        path = resolve_from_1.default.silent(global_modules_1.default, module_name);
    }
    if (!path) {
        throw new custom_errors_1.default("CORE-03", { module_name });
    }
    return path;
}
exports.get_module_path = get_module_path;
function merge_configs(a, b) {
    let plugins = [];
    if (a.plugins || b.plugins) {
        if (a.plugins) {
            plugins = [...a.plugins];
        }
        if (b.plugins) {
            plugins = [...new Set([...plugins, ...b.plugins])];
        }
    }
    return {
        ...a,
        ...b,
        plugins,
        plugins_rules: {
            ...a.plugins_rules,
            ...b.plugins_rules
        },
        rules: {
            ...a.rules,
            ...b.rules
        }
    };
}
/**
 * @param {CosmiconfigResult} cosmiconfig_result
 * @return {CosmiconfigResult}
 */
function augment_config(cosmiconfig_result) {
    if (!cosmiconfig_result) {
        return null;
    }
    const config_dir = path_1.default.dirname(cosmiconfig_result.filepath || "");
    const { ignoreFiles = [], ...config } = cosmiconfig_result.config;
    let result = {
        filepath: cosmiconfig_result.filepath,
        config
    };
    if (config.extends) {
        const normalized_extends = Array.isArray(config.extends) // throw an error if not string or array
            ? config.extends
            : [config.extends];
        const extended_config = normalized_extends.reduce((extended_config, extends_path) => {
            const configResult = load_extended_config(extends_path, config_dir);
            return merge_configs(extended_config, configResult);
        }, {});
        result = {
            filepath: result.filepath,
            config: merge_configs(extended_config, result.config)
        };
    }
    return {
        filepath: result.filepath,
        config: {
            ...result.config,
            ignoreFiles
        }
    };
}
/**
 * @param {object} extends_path
 * @param {string} config_dir
 * @return {CosmiconfigResult}
 */
function load_extended_config(extends_path, config_dir) {
    const extendPath = get_module_path(config_dir, extends_path);
    // create cosmiconfigSync only once ?
    // TODO fix (use "linthtml" ?)
    // @ts-ignore
    const cosmiconfig_result = (0, cosmiconfig_1.cosmiconfigSync)(null, {
        stopDir: STOP_DIR,
        transform: augment_config
    }).load(extendPath);
    return cosmiconfig_result ? cosmiconfig_result.config : null;
}
/**
 * @param {Object} rule_definition
 * @param {string} plugin_name
 * @throws {CustomError}
 */
function check_plugin_rule(rule_definition, plugin_name) {
    if (!rule_definition.name) {
        throw new custom_errors_1.default("CORE-06", { plugin_name });
    }
    if (!rule_definition.name.includes("/")) {
        throw new custom_errors_1.default("CORE-07", {
            rule_name: rule_definition.name,
            plugin_name
        });
    }
    if (!rule_definition.lint) {
        throw new custom_errors_1.default("CORE-08", { rule_name: rule_definition.name });
    }
}
/**
 * @param {string} plugin_name
 * @returns {Object}
 * @throws {CustomError}
 */
function load_plugin(plugin_name) {
    try {
        // TODO: Switch to import
        // Eslint Typescript recommend using import statement but import return a promise.
        /* eslint-disable-next-line @typescript-eslint/no-var-requires */
        const plugin_import = require(plugin_name);
        // Handle either ES6 or CommonJS modules
        return plugin_import.default || plugin_import;
    }
    catch (error) {
        throw new custom_errors_1.default("CORE-05", { module_name: plugin_name });
    }
}
/**
 * @param {CosmiconfigResult} cosmiconfig_result
 * @returns {CosmiconfigResult}
 * @throws {CustomError}
 */
function add_plugins_rules(cosmiconfig_result) {
    if (cosmiconfig_result.config.plugins) {
        const normalized_plugins = Array.isArray(cosmiconfig_result.config.plugins) // throw an error if not string or array
            ? cosmiconfig_result.config.plugins
            : [cosmiconfig_result.config.plugins];
        const plugins_rules = normalized_plugins.reduce((plugin_rules, plugin_name) => {
            const { rules } = load_plugin(plugin_name);
            if (rules && !Array.isArray(rules)) {
                throw new custom_errors_1.default("CORE-09", { plugin_name });
            }
            (rules !== null && rules !== void 0 ? rules : []).forEach((rule_definition) => {
                check_plugin_rule(rule_definition, plugin_name);
                plugin_rules[rule_definition.name] = rule_definition;
            });
            return plugin_rules;
        }, {});
        return {
            ...cosmiconfig_result,
            config: merge_configs(cosmiconfig_result.config, { plugins_rules } // use partial type?
            )
        };
    }
    return cosmiconfig_result;
}
const explorer = (0, cosmiconfig_1.cosmiconfigSync)("linthtml", {
    stopDir: STOP_DIR,
    packageProp: "linthtmlConfig",
    transform: augment_config
});
function config_from_path(file_path) {
    const config_path = path_1.default.resolve(process.cwd(), file_path);
    let isconfig_directory = false;
    try {
        let config = null;
        isconfig_directory = fs_1.default.lstatSync(config_path).isDirectory();
        if (isconfig_directory) {
            // stopDir: config_path needed?
            // create cosmiconfigSync only once ?
            config = (0, cosmiconfig_1.cosmiconfigSync)("linthtml", {
                stopDir: config_path,
                packageProp: "linthtmlConfig",
                transform: augment_config
            }).search(config_path);
        }
        else {
            config = explorer.load(config_path);
        }
        if (config === null) {
            throw new Error();
        }
        return add_plugins_rules(config);
    }
    catch (error) {
        // let CustomError (like CORE-03) passthrough
        if (error instanceof custom_errors_1.default) {
            throw error;
        }
        if (isconfig_directory) {
            throw new custom_errors_1.default("CORE-01", { config_path });
        }
        throw new custom_errors_1.default("CORE-02", { config_path });
    }
}
exports.config_from_path = config_from_path;
function find_local_config(file_path) {
    const config = explorer.search(file_path);
    return config ? add_plugins_rules(config) : null;
}
exports.find_local_config = find_local_config;
