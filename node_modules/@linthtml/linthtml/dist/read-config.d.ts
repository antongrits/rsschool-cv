import Issue from "./issue";
import { Node, Range } from "@linthtml/dom-utils/lib/dom_elements";
export declare type reportFunction = (data: {
    code: string;
    position: Range;
    meta?: any;
    message?: string;
}) => void;
export interface RuleDefinition {
    name: string;
    lint: (node: Node, rule_config: unknown, obj: {
        report: reportFunction;
        rules: Record<string, ActiveRuleDefinition>;
        global_config: any;
    }) => void;
    validateConfig?: <T>(option: T) => void | never;
    configTransform?: (option: unknown) => unknown;
    filter?: string[];
    end?: (opts?: unknown) => Issue[];
}
export declare type ActiveRuleDefinition = RuleDefinition & {
    severity: "warning" | "error";
    config: unknown;
};
export declare type RuleSeverity = "warning" | "error";
export declare type RuleActivation = boolean | RuleSeverity | "off";
export declare type RuleConfig = RuleActivation | [RuleActivation] | [RuleActivation, unknown];
export declare type LinterConfig = {
    extends?: string | string[];
    plugins?: string[];
    parser?: string;
    ignoreFiles?: string[];
    maxerr?: number;
    "text-ignore-regex"?: string | RegExp | false;
    "raw-ignore-regex"?: string | RegExp | false;
    "attr-name-ignore-regex"?: string | RegExp | false;
    "id-class-ignore-regex"?: string | RegExp | false;
    "line-max-len-ignore-regex"?: string | RegExp | false;
    plugins_rules?: {
        [rules_name: string]: RuleDefinition;
    };
    rules?: {
        [rule_name: string]: RuleConfig;
    };
};
export interface PluginConfig {
    rules?: RuleDefinition[];
}
export declare type LegacyRuleOption = Partial<RuleDefinition> & {
    name: string;
    active?: boolean;
    rules: string[];
};
export declare type LegacyRuleDefinition = RuleDefinition & {
    options: LegacyRuleOption[];
    on: string;
    subscribers: LegacyRuleDefinition[];
};
export interface LegacyLinterConfig {
    maxerr?: number;
    "text-ignore-regex"?: string | RegExp | false;
    "raw-ignore-regex"?: string | RegExp | false;
    "attr-name-ignore-regex"?: string | RegExp | false;
    "id-class-ignore-regex"?: string | RegExp | false;
    "line-max-len-ignore-regex"?: string | RegExp | false;
    [rule_name: string]: boolean | unknown;
}
export interface ExtractConfigResult {
    filepath: string;
    isEmpty?: boolean | undefined;
    config: LinterConfig | LegacyLinterConfig;
}
declare function get_module_path(basedir: string, module_name: string): string | never;
declare function config_from_path(file_path: string): ExtractConfigResult | never;
declare function find_local_config(file_path: string): ExtractConfigResult | null | never;
export { config_from_path, find_local_config, get_module_path };
//# sourceMappingURL=read-config.d.ts.map