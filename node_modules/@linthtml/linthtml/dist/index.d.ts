import { config_from_path, find_local_config, LegacyLinterConfig, LinterConfig } from "./read-config";
import Linter from "./linter";
import LegacyLinter from "./legacy/linter";
import * as messages from "./messages";
import Issue from "./issue";
export interface FileLinter {
    file_path: string;
    preset: string | undefined;
    config_path: string | undefined;
    linter: LegacyLinter;
}
/**
 * The linthtml namespace.
 */
declare const linthtml: {
    (html: string, config: LegacyLinterConfig | LinterConfig): Promise<Issue[]>;
    fromConfig: typeof fromConfig;
    /**
     * Create a linter per each file found using the globs provided
     *
     * @param {string[]} globs - An array of globs
     * @param {string} [config_path] - Path the config file that will be use to create configure the linters
     */
    create_linters_for_files(globs: string[], config_path?: string): FileLinter[];
    from_config_path(config_path: string): Linter | LegacyLinter;
    Linter: typeof Linter;
    LegacyLinter: typeof LegacyLinter;
    rules: import("./read-config").LegacyRuleDefinition[];
    presets: {
        none: LegacyLinterConfig;
        accessibility: LegacyLinterConfig;
        validate: LegacyLinterConfig;
        default: LegacyLinterConfig;
    };
    messages: typeof messages;
};
declare function fromConfig(config: LinterConfig): Linter;
declare function fromConfig(config: LegacyLinterConfig): LegacyLinter;
export default linthtml;
export { config_from_path, find_local_config, LegacyLinterConfig, LinterConfig };
//# sourceMappingURL=index.d.ts.map