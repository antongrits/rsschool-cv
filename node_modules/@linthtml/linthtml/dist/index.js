"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.find_local_config = exports.config_from_path = void 0;
const tslib_1 = require("tslib");
const read_config_1 = require("./read-config");
Object.defineProperty(exports, "config_from_path", { enumerable: true, get: function () { return read_config_1.config_from_path; } });
Object.defineProperty(exports, "find_local_config", { enumerable: true, get: function () { return read_config_1.find_local_config; } });
const linter_1 = tslib_1.__importDefault(require("./linter"));
const linter_2 = tslib_1.__importDefault(require("./legacy/linter"));
const presets_1 = require("./presets");
const rules_1 = tslib_1.__importDefault(require("./rules"));
const messages = tslib_1.__importStar(require("./messages"));
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const globby_1 = tslib_1.__importDefault(require("globby"));
const ignore_1 = tslib_1.__importDefault(require("ignore"));
const DEFAULT_EXCLUDED_FOLDERS = ["!node_modules/"];
/**
 * The linthtml namespace.
 */
const linthtml = function (html, config) {
    if ((config === null || config === void 0 ? void 0 : config.rules) !== undefined) {
        const linter = new linter_1.default(config);
        return linter.lint(html);
    }
    const linter = new linter_2.default(null, config);
    // @ts-ignore
    return linter.lint(html);
};
function fromConfig(config) {
    if (config && config.rules !== undefined) {
        return new linter_1.default(config);
    }
    return new linter_2.default(null, config);
}
linthtml.fromConfig = fromConfig;
function get_files_to_lint(input, config = {}) {
    const ignore_config = read_dot_ignore_file();
    const ignoreFiles = config.ignoreFiles;
    const ignore_patterns = ignore_config || ignoreFiles;
    const file_paths = input.reduce((paths, pattern) => [...paths, ...get_files_from_glob(pattern, ignore_patterns)], []);
    return filter_ignored_files(file_paths, ignore_patterns);
}
function get_files_from_glob(glob_pattern, ignore_config) {
    const use_default_ignore = ignore_config === undefined && path_1.default.isAbsolute(glob_pattern) === false;
    return globby_1.default.sync([glob_pattern, ...DEFAULT_EXCLUDED_FOLDERS], {
        gitignore: use_default_ignore,
        expandDirectories: {
            files: ["**/*.html"],
            extensions: ["html"]
        }
    });
}
function filter_ignored_files(file_paths, ignore_pattern) {
    if (ignore_pattern === undefined) {
        return file_paths;
    }
    // @ts-ignore
    const ignorer = (0, ignore_1.default)().add(ignore_pattern);
    return ignorer.filter(file_paths);
}
function read_dot_ignore_file() {
    const ignore_file_path = path_1.default.join(process.cwd(), ".linthtmlignore");
    if (fs_1.default.existsSync(ignore_file_path)) {
        return fs_1.default.readFileSync(ignore_file_path).toString();
    }
    return undefined;
}
function should_ignore_file(file_path, ignore_pattern = []) {
    if (ignore_pattern.length === 0) {
        return false;
    }
    const ignorer = (0, ignore_1.default)().add(ignore_pattern);
    return ignorer.ignores(file_path);
}
function create_file_linter(file_path, config) {
    return {
        file_path,
        preset: config.preset,
        config_path: config.filepath,
        linter: linthtml.fromConfig(config.config)
    };
}
/**
 * Create a linter per each file found using the globs provided
 *
 * @param {string[]} globs - An array of globs
 * @param {string} [config_path] - Path the config file that will be use to create configure the linters
 */
linthtml.create_linters_for_files = function (globs, config_path) {
    if (config_path) {
        const config = (0, read_config_1.config_from_path)(config_path);
        const files = get_files_to_lint(globs, config.config);
        return files.map((file_path) => create_file_linter(file_path, config));
    }
    const files = get_files_to_lint(globs);
    return files.reduce((files_to_lint, file_path) => {
        var _a;
        // if no config, fallback to presets as before
        const local_config = (_a = (0, read_config_1.find_local_config)(file_path)) !== null && _a !== void 0 ? _a : {
            config: presets_1.presets.default,
            preset: "default"
        };
        if (!should_ignore_file(file_path, local_config.config.ignoreFiles)) {
            return files_to_lint.concat(create_file_linter(file_path, local_config));
        }
        return files_to_lint;
    }, []);
};
linthtml.from_config_path = function (config_path) {
    const config = (0, read_config_1.config_from_path)(config_path);
    return linthtml.fromConfig(config.config);
};
linthtml.Linter = linter_1.default;
linthtml.LegacyLinter = linter_2.default;
linthtml.rules = rules_1.default;
linthtml.presets = presets_1.presets;
linthtml.messages = messages;
exports.default = linthtml;
