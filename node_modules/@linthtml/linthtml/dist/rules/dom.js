"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const issue_1 = tslib_1.__importDefault(require("../issue"));
const array_1 = require("../utils/array");
// TODO: remove .default after typescript migration
function apply_rules(rules, element, global_config) {
    const issues = [];
    if (!rules) {
        return [];
    }
    function report(rule) {
        return (data) => {
            if (Array.isArray(data)) {
                issues.push(...data);
            }
            else {
                const meta = {
                    ...data.meta,
                    code: data.code,
                    message: data.message
                };
                issues.push(new issue_1.default(rule.name, data.position, meta));
            }
        };
    }
    const activated_rules = rules.reduce((rules, rule) => {
        return {
            ...rules,
            [rule.name]: rule
        };
    }, {});
    rules.forEach((rule) => {
        const rule_config = global_config[rule.name];
        rule.lint(element, rule_config, {
            report: report(rule),
            rules: activated_rules,
            global_config
        });
    });
    return issues;
}
function lint(dom, opts, inlineConfigs) {
    // @ts-ignore
    const subs = this.subscribers;
    /*
     * Reset our inline configuration object to be what opts is.
     * Does a deep copy so as to not change opts in the future.
     */
    inlineConfigs.reset(opts);
    const getIssues = function (element) {
        // fast-forwards inlineConfig.current to whatever it should be at this index.
        inlineConfigs.getOptsAtIndex(element.startIndex);
        let issues = apply_rules(subs, element, inlineConfigs.current);
        if (element.children && element.children.length > 0) {
            element.children.forEach(function (child) {
                issues = issues.concat(getIssues(child));
            });
        }
        return issues;
    };
    const issues = dom.children.length ? dom.children.map(getIssues) : [];
    return (0, array_1.flatten)(issues);
}
exports.default = {
    name: "dom",
    lint
};
