"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chai_1 = require("chai");
const index_1 = tslib_1.__importDefault(require("../../../index"));
const presets_1 = require("../../../presets");
describe("legacy linter | href-style", function () {
    function createLinter(config) {
        return new index_1.default.LegacyLinter(index_1.default.rules, presets_1.presets.none, config);
    }
    describe('"absolute" mode', function () {
        it("Should not report any error for absolute links", async function () {
            const linter = createLinter({ "href-style": "absolute" });
            const html = '<a href="http://www.google.com">A link</a>';
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should report an error for relative links", async function () {
            const linter = createLinter({ "href-style": "absolute" });
            const html = '<a href="/foo">A link</a>';
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(1);
        });
        it("Should not report any error for empty links", async function () {
            const linter = createLinter({ "href-style": "absolute" });
            const html = "<a>A link</a>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should not report any error for fragment only links", async function () {
            const linter = createLinter({ "href-style": "absolute" });
            const html = '<a href="#bar">A link</a>';
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
    });
    describe('"relative" mode', function () {
        it("Should not report any error for relative links", async function () {
            const linter = createLinter({ "href-style": "relative" });
            const html = '<a href="/foo">A link</a>';
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should report an error for absolute links", async function () {
            const linter = createLinter({ "href-style": "relative" });
            const html = '<a href="http://www.google.com">A link</a>';
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(1);
        });
        it("Should not report any error for empty links", async function () {
            const linter = createLinter({ "href-style": "relative" });
            const html = "<a>A link</a>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should not report any error for fragment only links", async function () {
            const linter = createLinter({ "href-style": "relative" });
            const html = '<a href="#bar">A link</a>';
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
    });
    it("Should throw an error for an invalid config", function () {
        const linter = createLinter({ "href-style": true });
        const html = "";
        (0, chai_1.expect)(() => linter.lint(html)).to.throw('Configuration for rule "href-style" is invalid: Expected string got boolean');
    });
    it("Should throw an error if not given a list of strings as config", function () {
        const linter = createLinter({ "href-style": "foo" });
        const html = "";
        (0, chai_1.expect)(() => linter.lint(html)).to.throw('Configuration for rule "href-style" is invalid: "foo" is not accepted. Accepted values are "absolute" and "relative".');
    });
});
describe("href-style", function () {
    function createLinter(rules) {
        return index_1.default.fromConfig({ rules });
    }
    describe('"absolute" mode', function () {
        it("Should not report any error for absolute links", async function () {
            const linter = createLinter({
                "href-style": [true, "absolute"]
            });
            const html = '<a href="http://www.google.com">A link</a>';
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should report an error for relative links", async function () {
            const linter = createLinter({
                "href-style": [true, "absolute"]
            });
            const html = '<a href="/foo">A link</a>';
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(1);
        });
        it("Should not report any error for empty links", async function () {
            const linter = createLinter({
                "href-style": [true, "absolute"]
            });
            const html = "<a>A link</a>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should not report any error for fragment only links", async function () {
            const linter = createLinter({
                "href-style": [true, "absolute"]
            });
            const html = '<a href="#bar">A link</a>';
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
    });
    describe('"relative" mode', function () {
        it("Should not report any error for relative links", async function () {
            const linter = createLinter({
                "href-style": [true, "relative"]
            });
            const html = '<a href="/foo">A link</a>';
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should report an error for absolute links", async function () {
            const linter = createLinter({
                "href-style": [true, "relative"]
            });
            const html = '<a href="http://www.google.com">A link</a>';
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(1);
        });
        it("Should not report any error for empty links", async function () {
            const linter = createLinter({
                "href-style": [true, "relative"]
            });
            const html = "<a>A link</a>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should not report any error for fragment only links", async function () {
            const linter = createLinter({
                "href-style": [true, "relative"]
            });
            const html = '<a href="#bar">A link</a>';
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
    });
    it("Should throw an error for an invalid config", function () {
        const config = {
            "href-style": [true, true]
        };
        (0, chai_1.expect)(() => createLinter(config)).to.throw('Configuration for rule "href-style" is invalid: Expected string got boolean');
    });
    it("Should throw an error if not given a list of strings as config", function () {
        const config = {
            "href-style": [true, "foo"]
        };
        (0, chai_1.expect)(() => createLinter(config)).to.throw('Configuration for rule "href-style" is invalid: "foo" is not accepted. Accepted values are "absolute" and "relative".');
    });
});
