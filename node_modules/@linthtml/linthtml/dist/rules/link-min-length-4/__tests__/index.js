"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chai_1 = require("chai");
const index_1 = tslib_1.__importDefault(require("../../../index"));
const presets_1 = require("../../../presets");
describe("legacy linter | link-min-length-4", function () {
    function createLinter(config) {
        return new index_1.default.LegacyLinter(index_1.default.rules, presets_1.presets.none, config);
    }
    it("Ignore link without href attribute", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = "<a>A</a>";
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Report an error for links with text content with less than 4 chars", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="#">AAA</a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Report an error for links with an aria-label's content with less than 4 chars", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="#" aria-label="AAA"></a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Report nothing for links with an aria-label's content with more than 4 chars", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="#" aria-label="AAAAA"></a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Report nothing for links with an aria-label's content with 4 chars", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="#" aria-label="AAAA"></a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Report nothing for links with text content with 4 chars", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="#">AAAA</a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Report nothing for links with text content with 4 chars", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="#">AAAAA</a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Report nothing for links with valid text content (nested)", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="https://google.com">span>Google</span></a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
});
describe("link-min-length-4", function () {
    function createLinter(rules) {
        return index_1.default.fromConfig({ rules });
    }
    it("Ignore link without href attribute", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = "<a>A</a>";
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Report an error for links with text content with less than 4 chars", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="#">AAA</a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Report an error for links with an aria-label's content with less than 4 chars", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="#" aria-label="AAA"></a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Report nothing for links with an aria-label's content with more than 4 chars", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="#" aria-label="AAAAA"></a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Report nothing for links with an aria-label's content with 4 chars", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="#" aria-label="AAAA"></a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Report nothing for links with text content with 4 chars", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="#">AAAA</a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Report nothing for links with text content with 4 chars", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="#">AAAAA</a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Report nothing for links with valid text content (nested)", async function () {
        const linter = createLinter({ "link-min-length-4": true });
        const html = '<a href="https://google.com">span>Google</span></a>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
});
