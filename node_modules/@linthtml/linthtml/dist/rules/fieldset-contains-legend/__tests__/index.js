"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chai_1 = require("chai");
const index_1 = tslib_1.__importDefault(require("../../../index"));
const presets_1 = require("../../../presets");
describe("legacy linter | fieldset-contains-legend", function () {
    function createLinter(config) {
        return new index_1.default.LegacyLinter(index_1.default.rules, presets_1.presets.none, config);
    }
    it("Should not report an error when a fieldset contains a legend tag", async function () {
        const linter = createLinter({ "fieldset-contains-legend": true });
        const html = "<fieldset><legend>Foo</legend></fieldset>";
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should report an error when a fieldset does not contains a legend tag", async function () {
        const linter = createLinter({ "fieldset-contains-legend": true });
        const html = "<fieldset><div></div></fieldset>";
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
});
describe("fieldset-contains-legend", function () {
    function createLinter(rules) {
        return index_1.default.fromConfig({ rules });
    }
    it("Should not report an error when a fieldset contains a legend tag", async function () {
        const linter = createLinter({ "fieldset-contains-legend": true });
        const html = "<fieldset><legend>Foo</legend></fieldset>";
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should report an error when a fieldset does not contains a legend tag", async function () {
        const linter = createLinter({ "fieldset-contains-legend": true });
        const html = "<fieldset><div></div></fieldset>";
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
});
