"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chai_1 = require("chai");
const index_1 = tslib_1.__importDefault(require("../../../index"));
const presets_1 = require("../../../presets");
describe("legay linter | indent-style", function () {
    function createLinter(config) {
        return new index_1.default.LegacyLinter(index_1.default.rules, presets_1.presets.none, config);
    }
    describe('"tabs" style', function () {
        it("Should not report any error for tab indent", async function () {
            const linter = createLinter({ "indent-style": "tabs" });
            const html = "<div>\n\t<p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should report an error for space indent", async function () {
            const linter = createLinter({ "indent-style": "tabs" });
            const html = "<div>\n <p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(1);
            (0, chai_1.expect)(issues[0].code).to.equal("E024");
            (0, chai_1.expect)(issues[0].rule).to.equal("indent-style");
            (0, chai_1.expect)(issues[0].position).to.deep.equal({
                start: {
                    line: 2,
                    column: 2
                },
                end: {
                    line: 2,
                    column: 12
                }
            });
            (0, chai_1.expect)(issues[0].data).to.deep.equal({
                current_indentation: 2,
                current_type: "spaces",
                expected_indentation: 0,
                expected_type: "tabs",
                tagName: "p"
            });
        });
    });
    describe('"spaces" style', function () {
        it("Should not report any error for space indent", async function () {
            const linter = createLinter({ "indent-style": "spaces" });
            const html = "<div>\n <p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should report an error for tab indent", async function () {
            const linter = createLinter({ "indent-style": "spaces" });
            const html = "<div>\n\t<p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(1);
            (0, chai_1.expect)(issues[0].code).to.equal("E024");
            (0, chai_1.expect)(issues[0].rule).to.equal("indent-style");
            (0, chai_1.expect)(issues[0].position).to.deep.equal({
                start: {
                    line: 2,
                    column: 2
                },
                end: {
                    line: 2,
                    column: 12
                }
            });
            (0, chai_1.expect)(issues[0].data).to.deep.equal({
                current_indentation: 2,
                current_type: "tabs",
                expected_indentation: 0,
                expected_type: "spaces",
                tagName: "p"
            });
        });
    });
    describe('"nonmixed" style', function () {
        it("Should not report any error for space indent", async function () {
            const linter = createLinter({ "indent-style": "nonmixed" });
            const html = "<div>\n <p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should not report any error for tab indent", async function () {
            const linter = createLinter({ "indent-style": "nonmixed" });
            const html = "<div>\n\t<p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should report an error when tabs and spaces are mixed on the same line", async function () {
            const linter = createLinter({ "indent-style": "nonmixed" });
            const html = "<div>\n\t <p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(1);
            (0, chai_1.expect)(issues[0].code).to.equal("E024");
            (0, chai_1.expect)(issues[0].rule).to.equal("indent-style");
            (0, chai_1.expect)(issues[0].position).to.deep.equal({
                start: {
                    line: 2,
                    column: 3
                },
                end: {
                    line: 2,
                    column: 13
                }
            });
            (0, chai_1.expect)(issues[0].data).to.deep.equal({
                current_indentation: 3,
                current_type: "mixed",
                expected_indentation: 0,
                expected_type: "nonmixed",
                tagName: "p"
            });
        });
    });
    it("Should throw an error if not given a string as config", function () {
        const linter = createLinter({ "indent-style": true });
        const html = "";
        (0, chai_1.expect)(() => linter.lint(html)).to.throw('Configuration for rule "indent-style" is invalid: Expected string got boolean');
    });
    it("Should throw an error if not given a valid string as config", function () {
        const linter = createLinter({ "indent-style": "foo" });
        const html = "";
        (0, chai_1.expect)(() => linter.lint(html)).to.throw('Configuration for rule "indent-style" is invalid: "foo" is not accepted. Accepted values are "tabs", "spaces" and "nonmixed".');
    });
});
describe("indent-style", function () {
    function createLinter(rules) {
        return index_1.default.fromConfig({ rules });
    }
    describe('"tabs" style', function () {
        it("Should not report any error for tab indent", async function () {
            const linter = createLinter({
                "indent-style": [true, "tabs"]
            });
            const html = "<div>\n\t<p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should report an error for space indent", async function () {
            const linter = createLinter({
                "indent-style": [true, "tabs"]
            });
            const html = "<div>\n <p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(1);
            (0, chai_1.expect)(issues[0].code).to.equal("E024");
            (0, chai_1.expect)(issues[0].rule).to.equal("indent-style");
            (0, chai_1.expect)(issues[0].position).to.deep.equal({
                start: {
                    line: 2,
                    column: 2
                },
                end: {
                    line: 2,
                    column: 12
                }
            });
            (0, chai_1.expect)(issues[0].data).to.deep.equal({
                current_indentation: 2,
                current_type: "spaces",
                expected_indentation: 0,
                expected_type: "tabs",
                tagName: "p"
            });
        });
    });
    describe('"spaces" style', function () {
        it("Should not report any error for space indent", async function () {
            const linter = createLinter({
                "indent-style": [true, "spaces"]
            });
            const html = "<div>\n <p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should report an error for tab indent", async function () {
            const linter = createLinter({
                "indent-style": [true, "spaces"]
            });
            const html = "<div>\n\t<p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(1);
            (0, chai_1.expect)(issues[0].code).to.equal("E024");
            (0, chai_1.expect)(issues[0].rule).to.equal("indent-style");
            (0, chai_1.expect)(issues[0].position).to.deep.equal({
                start: {
                    line: 2,
                    column: 2
                },
                end: {
                    line: 2,
                    column: 12
                }
            });
            (0, chai_1.expect)(issues[0].data).to.deep.equal({
                current_indentation: 2,
                current_type: "tabs",
                expected_indentation: 0,
                expected_type: "spaces",
                tagName: "p"
            });
        });
    });
    describe('"nonmixed" style', function () {
        it("Should not report any error for space indent", async function () {
            const linter = createLinter({
                "indent-style": [true, "nonmixed"]
            });
            const html = "<div>\n <p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should not report any error for tab indent", async function () {
            const linter = createLinter({
                "indent-style": [true, "nonmixed"]
            });
            const html = "<div>\n\t<p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should report an error when tabs and spaces are mixed on the same line", async function () {
            const linter = createLinter({
                "indent-style": [true, "nonmixed"]
            });
            const html = "<div>\n\t <p>foo</p>\n</div>";
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(1);
            (0, chai_1.expect)(issues[0].code).to.equal("E024");
            (0, chai_1.expect)(issues[0].rule).to.equal("indent-style");
            (0, chai_1.expect)(issues[0].position).to.deep.equal({
                start: {
                    line: 2,
                    column: 3
                },
                end: {
                    line: 2,
                    column: 13
                }
            });
            (0, chai_1.expect)(issues[0].data).to.deep.equal({
                current_indentation: 3,
                current_type: "mixed",
                expected_indentation: 0,
                expected_type: "nonmixed",
                tagName: "p"
            });
        });
    });
    it("Should throw an error if not given a string as config", function () {
        const config = {
            "indent-style": [true, true]
        };
        (0, chai_1.expect)(() => createLinter(config)).to.throw('Configuration for rule "indent-style" is invalid: Expected string got boolean');
    });
    it("Should throw an error if not given a valid string as config", function () {
        const config = {
            "indent-style": [true, "foo"]
        };
        (0, chai_1.expect)(() => createLinter(config)).to.throw('Configuration for rule "indent-style" is invalid: "foo" is not accepted. Accepted values are "tabs", "spaces" and "nonmixed".');
    });
});
// // //shoult report an error
// // <div><p></p>
// //   <p></p><p></p>
// // </div>
// const linter = createLinter();
// const html = [
//   "<div>",
//   "  <div>",
//   "    <p></p>",
//   "  </div>",
//   "  <p></p>",
//   "  <p></p><p></p>",
//   "</div>"
// ].join('\n\r');
// linter.lint(html, { "indent-style": "spaces", "indent-width": 2 }).then(issues => {
//   console.log(issues)
// });
// // //shoult not report an error
// // <div>
// //   <p></p>
// //   <p></p><p></p>
// // </div>
// // //shoult not report an error
// // <div>
// //   <p></p><p></p><p></p>
// // </div>
// // //shoult not report an error
// // <div><p></p><p></p><p></p></div>
