"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chai_1 = require("chai");
const index_1 = tslib_1.__importDefault(require("../../../index"));
const presets_1 = require("../../../presets");
describe("legacy linter | attr-quote-style", function () {
    function createLinter(config) {
        return new index_1.default.LegacyLinter(index_1.default.rules, presets_1.presets.none, config);
    }
    it("Should report an error for unquoted attribute", async function () {
        const linter = createLinter({ "attr-quote-style": "quoted" });
        const html = "<div class=foo></div>";
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Should not report an error for quoted attribute", async function () {
        const linter = createLinter({ "attr-quote-style": "quoted" });
        const html = '<div class="foo"></div>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should report an error when invalid quote style is used (single quoted attr in double mode)", async function () {
        const linter = createLinter({ "attr-quote-style": "double" });
        const html = "<div class='foo'></div>";
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Should report an error when invalid quote style is used (double quoted attr in single mode)", async function () {
        const linter = createLinter({ "attr-quote-style": "single" });
        const html = '<div class="foo"></div>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Should ignore attributes with no values", async function () {
        const linter = createLinter({ "attr-quote-style": "single" });
        const html = "<button disabled>Button</button>";
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should throw an error when an invalid config is provided (invalid string)", function () {
        const linter = createLinter({ "attr-quote-style": "unknown" });
        const html = "";
        (0, chai_1.expect)(() => linter.lint(html)).to.throw('Configuration for rule "attr-quote-style" is invalid: "unknown" is not accepted. Accepted values are "double", "single" and "quoted".');
    });
    it("Should throw an error when an invalid config is provided (invalid type)", function () {
        const linter = createLinter({ "attr-quote-style": 3 });
        const html = "";
        (0, chai_1.expect)(() => linter.lint(html)).to.throw('Configuration for rule "attr-quote-style" is invalid: Expected string got number.');
    });
});
describe("attr-quote-style", function () {
    function createLinter(rules) {
        return index_1.default.fromConfig({ rules });
    }
    it("Should report an error for unquoted attribute", async function () {
        const linter = createLinter({
            "attr-quote-style": [true, "quoted"]
        });
        const html = "<div class=foo></div>";
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Should not report an error for quoted attribute", async function () {
        const linter = createLinter({
            "attr-quote-style": [true, "quoted"]
        });
        const html = '<div class="foo"></div>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should report an error when invalid quote style is used (single quoted attr in double mode)", async function () {
        const linter = createLinter({
            "attr-quote-style": [true, "double"]
        });
        const html = "<div class='foo'></div>";
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Should report an error when invalid quote style is used (double quoted attr in single mode)", async function () {
        const linter = createLinter({
            "attr-quote-style": [true, "single"]
        });
        const html = '<div class="foo"></div>';
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Should ignore attributes with no values", async function () {
        const linter = createLinter({
            "attr-quote-style": [true, "single"]
        });
        const html = "<button disabled>Button</button>";
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should throw an error when an invalid config is provided (invalid string)", function () {
        const config = {
            "attr-quote-style": [true, "unknown"]
        };
        (0, chai_1.expect)(() => createLinter(config)).to.throw('Configuration for rule "attr-quote-style" is invalid: "unknown" is not accepted. Accepted values are "double", "single" and "quoted".');
    });
    it("Should throw an error when an invalid config is provided (invalid type)", function () {
        const config = {
            "attr-quote-style": [true, 3]
        };
        (0, chai_1.expect)(() => createLinter(config)).to.throw('Configuration for rule "attr-quote-style" is invalid: Expected string got number.');
    });
});
