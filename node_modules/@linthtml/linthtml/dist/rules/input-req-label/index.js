"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const issue_1 = tslib_1.__importDefault(require("../../issue"));
const dom_utils_1 = require("@linthtml/dom-utils");
const RULE_NAME = "input-req-label";
function is_input_or_label(node) {
    return ["input", "label"].indexOf(node.name) !== -1;
}
// TODO: Cleanup rule
function lint(node, _config, { report }) {
    if (!(0, dom_utils_1.is_tag_node)(node) || is_input_or_label(node) === false) {
        return;
    }
    // if it's a label with a 'for', store that value
    if (node.name === "label") {
        const for_attribute = (0, dom_utils_1.attribute_value)(node, "for");
        if (for_attribute) {
            // @ts-ignore
            this.labels[for_attribute.chars] = node;
        }
        return;
    }
    if ((0, dom_utils_1.attribute_has_value)(node, "type", "hidden")) {
        return;
    }
    if ((0, dom_utils_1.attribute_has_value)(node, "type", "button")) {
        const value = (0, dom_utils_1.attribute_value)(node, "value");
        if (value === null || value.chars.trim() === "") {
            return report({
                code: "E033",
                position: node.open.loc,
                meta: {
                    data: {
                        idValue: "null"
                    }
                }
            });
        }
        return;
    }
    // check if the input has a label as a parent.
    // TODO: check if
    // @ts-ignore
    for (let e = node; (e = e.parent);) {
        if (e.name === "label") {
            return;
        }
    }
    // check if the input has a named label, by storing the values to
    // check at the end.
    const id = (0, dom_utils_1.attribute_value)(node, "id");
    if (id) {
        // @ts-ignore
        this.inputsInfo.push({
            id: id.chars,
            loc: node.open.loc
        });
    }
    else {
        report({
            code: "E033",
            position: node.open.loc,
            meta: {
                data: {
                    idValue: "null"
                }
            }
        });
    }
}
// REMOVE
function end() {
    const issues = [];
    const { inputsInfo, labels } = this;
    inputsInfo.forEach(({ id, loc }) => {
        if (!labels[id]) {
            issues.push(new issue_1.default(RULE_NAME, loc, {
                code: "E033",
                rule: RULE_NAME,
                data: {
                    idValue: id
                }
            }));
        }
    });
    // wipe previous table
    // @ts-ignore
    this.labels = {};
    // @ts-ignore
    this.inputsInfo = [];
    return issues;
}
exports.default = {
    name: RULE_NAME,
    lint,
    end,
    labels: {},
    inputsInfo: []
};
