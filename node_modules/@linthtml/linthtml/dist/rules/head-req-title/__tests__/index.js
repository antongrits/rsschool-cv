"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chai_1 = require("chai");
const index_1 = tslib_1.__importDefault(require("../../../index"));
const presets_1 = require("../../../presets");
describe("legacy linter | head-req-title", function () {
    function createLinter(config) {
        return new index_1.default.LegacyLinter(index_1.default.rules, presets_1.presets.none, config);
    }
    it("Should not report any error when the head title is present", async function () {
        const linter = createLinter({ "head-req-title": true });
        const html = `
    <html>
      <head>
        <title>Title!</title>
      </head>
    </html>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should report an error when the head title is not present", async function () {
        const linter = createLinter({ "head-req-title": true });
        const html = `
    <html>
      <head>
      </head>
    </html>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Should report an error when the head title is empty", async function () {
        const linter = createLinter({ "head-req-title": true });
        const html = `
    <html>
      <head>
        <title></title>
      </head>
    </html>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    describe("Multiple <title>", function () {
        it("Should not report any error when one title is not empty", async function () {
            const linter = createLinter({ "head-req-title": true });
            const html = `
      <html>
        <head>
          <title></title>
          <title>Foo</title>
        </head>
      </html>
      `;
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should report any errors when all titles are empty", async function () {
            const linter = createLinter({ "head-req-title": true });
            const html = `
      <html>
        <head>
          <title></title>
          <title></title>
        </head>
      </html>
      `;
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(1);
        });
    });
});
describe("legacy linter | head-req-title", function () {
    function createLinter(rules) {
        return index_1.default.fromConfig({ rules });
    }
    it("Should not report any error when the head title is present", async function () {
        const linter = createLinter({ "head-req-title": true });
        const html = `
    <html>
      <head>
        <title>Title!</title>
      </head>
    </html>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should report an error when the head title is not present", async function () {
        const linter = createLinter({ "head-req-title": true });
        const html = `
    <html>
      <head>
      </head>
    </html>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Should report an error when the head title is empty", async function () {
        const linter = createLinter({ "head-req-title": true });
        const html = `
    <html>
      <head>
        <title></title>
      </head>
    </html>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    describe("Multiple <title>", function () {
        it("Should not report any error when one title is not empty", async function () {
            const linter = createLinter({ "head-req-title": true });
            const html = `
      <html>
        <head>
          <title></title>
          <title>Foo</title>
        </head>
      </html>
      `;
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(0);
        });
        it("Should report any errors when all titles are empty", async function () {
            const linter = createLinter({ "head-req-title": true });
            const html = `
      <html>
        <head>
          <title></title>
          <title></title>
        </head>
      </html>
      `;
            const issues = await linter.lint(html);
            (0, chai_1.expect)(issues).to.have.lengthOf(1);
        });
    });
});
