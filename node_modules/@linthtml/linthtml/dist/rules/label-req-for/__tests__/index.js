"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chai_1 = require("chai");
const index_1 = tslib_1.__importDefault(require("../../../index"));
const presets_1 = require("../../../presets");
describe("legacy linter | label-req-for", function () {
    function createLinter(config) {
        return new index_1.default.LegacyLinter(index_1.default.rules, presets_1.presets.none, config);
    }
    it("Should not report any error when label has for value matching an existing input id", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
      <label for="foo">Foo</label>
      <input type="radio" id="foo">
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should report an error when label has for value not matching an existing input id", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
      <label for="foo">Foo</label>
      <input type="radio" id="bar">
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Should be able to deal with multiple label/input", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
      <label for="foo">Foo</label>
      <input type="text" id="foo"/>
      <label for="bar">Bar</label>
      <input type="text" id="bar"/>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should not report any error event when label+input are not siblings", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
    <input type="text" id="bar"/>
      <label for="foo">Foo</label>
      <label for="bar">Bar</label>
      <input type="text" id="foo"/>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should not report any error when label without for has a input has child node", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
      <label for="foo">
        Foo
        <div>
          <input type="text" id="foo"/>
        </div>
      </label>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should report an error when label without for doesnt't have any labelable node has child", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
      <label for="foo">
        Foo
        <div>
          Bar
        </div>
      </label>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Should report an error when label has for value matching an none labelable node", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
      <label for="foo">Foo</label>
      <p id="foo">Text content</p>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
});
describe("label-req-for", function () {
    function createLinter(rules) {
        return index_1.default.fromConfig({ rules });
    }
    it("Should not report any error when label has for value matching an existing input id", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
      <label for="foo">Foo</label>
      <input type="radio" id="foo">
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should report an error when label has for value not matching an existing input id", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
      <label for="foo">Foo</label>
      <input type="radio" id="bar">
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Should be able to deal with multiple label/input", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
      <label for="foo">Foo</label>
      <input type="text" id="foo"/>
      <label for="bar">Bar</label>
      <input type="text" id="bar"/>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should not report any error event when label+input are not siblings", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
    <input type="text" id="bar"/>
      <label for="foo">Foo</label>
      <label for="bar">Bar</label>
      <input type="text" id="foo"/>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should not report any error when label without for has a input has child node", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
      <label for="foo">
        Foo
        <div>
          <input type="text" id="foo"/>
        </div>
      </label>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(0);
    });
    it("Should report an error when label without for doesnt't have any labelable node has child", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
      <label for="foo">
        Foo
        <div>
          Bar
        </div>
      </label>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
    it("Should report an error when label has for value matching an none labelable node", async function () {
        const linter = createLinter({ "label-req-for": true });
        const html = `
      <label for="foo">Foo</label>
      <p id="foo">Text content</p>
    `;
        const issues = await linter.lint(html);
        (0, chai_1.expect)(issues).to.have.lengthOf(1);
    });
});
