"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dom_utils_1 = require("@linthtml/dom-utils");
const RULE_NAME = "label-req-for";
function buil_id_map(originnodement) {
    let rnodem = originnodement;
    while (rnodem.parent !== null) {
        rnodem = rnodem.parent;
    }
    while (rnodem.prev !== null) {
        rnodem = rnodem.prev;
    }
    const roots = [];
    while (rnodem !== null) {
        roots.push(rnodem);
        rnodem = rnodem.next;
    }
    const idmap = new Map();
    function iteratenodements(nodement) {
        if ((0, dom_utils_1.is_tag_node)(nodement) && (0, dom_utils_1.has_attribute)(nodement, "id")) {
            const id = (0, dom_utils_1.attribute_value)(nodement, "id").chars;
            if (!idmap.has(id)) {
                idmap.set(id, nodement);
            }
        }
        if (nodement.children) {
            nodement.children.forEach(iteratenodements);
        }
    }
    roots.forEach(iteratenodements);
    return idmap;
}
function has_valid_child(nodement) {
    // test for any nodement to be labeable
    return nodement.children.some(dom_utils_1.is_labelable);
}
// TODO: Cleanup rule code
function lint(node, _config, { report }) {
    if (!(0, dom_utils_1.is_tag_node)(node) || node.name !== "label") {
        return;
    }
    if ((0, dom_utils_1.has_attribute)(node, "for") === false) {
        return report({
            // Report only "E020" ?
            code: has_valid_child(node) ? "E019" : "E020",
            position: node.open.loc
        });
    }
    // @ts-ignore
    if (!this.idmap) {
        // @ts-ignore
        this.idmap = buil_id_map(node);
    }
    const id = (0, dom_utils_1.attribute_value)(node, "for").chars;
    // @ts-ignore
    const fornodement = this.idmap.get(id);
    if (!fornodement) {
        // the paired nodement does not exist
        report({
            code: "E021",
            position: node.open.loc,
            meta: {
                data: {
                    id: id
                }
            }
        });
    }
    else if (!(0, dom_utils_1.is_labelable)(fornodement)) {
        report({
            code: "E022",
            position: node.open.loc,
            meta: {
                data: {
                    id: id
                }
            }
        });
    }
}
function end() {
    // @ts-ignore
    this.idmap = null;
    return [];
}
exports.default = {
    name: RULE_NAME,
    lint,
    end,
    // @ts-ignore
    idmap: null // needed?
};
