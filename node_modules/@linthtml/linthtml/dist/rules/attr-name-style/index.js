"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const check_format_1 = tslib_1.__importDefault(require("../../utils/check_format"));
const dom_utils_1 = require("@linthtml/dom-utils");
const validate_option_1 = require("../../validate_option");
const util_1 = require("util");
const { isRegExp } = util_1.types;
// TODO: Deprecate "attr-name-ignore-regex" "rule" and add a setting to ignore attribute in this rule
const RULE_NAME = "attr-name-style";
function lint(node, format, { report, global_config }) {
    if ((0, dom_utils_1.is_tag_node)(node)) {
        // const format = config[this.name];
        // TODO: Remove after `raw-ignore-text` refacto
        let attributes = node.attributes.filter(({ name }) => /^Â¤+$/.test(name.chars) === false);
        const ignore = global_config["attr-name-ignore-regex"];
        if (ignore) {
            const R_ignore = isRegExp(ignore) ? ignore : new RegExp(ignore);
            attributes = attributes.filter(({ name }) => (0, check_format_1.default)(R_ignore, name.chars) === false);
        }
        attributes.forEach(({ name }) => {
            if ((0, check_format_1.default)(format, name.chars) === false) {
                report({
                    code: "E002",
                    position: name.loc,
                    meta: {
                        data: {
                            format,
                            attribute: name.chars
                        }
                    }
                });
            }
        });
    }
}
exports.default = {
    name: RULE_NAME,
    validateConfig: (0, validate_option_1.create_string_or_regexp_validator)(RULE_NAME),
    lint
};
