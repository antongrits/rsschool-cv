"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const check_format_1 = tslib_1.__importDefault(require("../../utils/check_format"));
const dom_utils_1 = require("@linthtml/dom-utils");
const validate_option_1 = require("../../validate_option");
const util_1 = require("util");
const { isRegExp } = util_1.types;
const RULE_NAME = "class-style";
function filterClasses(classes, options) {
    let ignore = options["id-class-ignore-regex"];
    // TODO: Remove after `raw-ignore-text` refacto
    classes = classes.filter((_) => /^Â¤+$/.test(_) === false);
    if (ignore) {
        ignore = isRegExp(ignore) ? ignore : new RegExp(ignore);
        classes = classes.filter((_class) => !ignore.test(_class));
    }
    return classes;
}
function lint(node, format, { report, global_config }) {
    if (format === "none") {
        return;
    }
    if ((0, dom_utils_1.is_tag_node)(node) && (0, dom_utils_1.has_non_empty_attribute)(node, "class")) {
        // const format = options[this.name] || options["id-class-style"];
        const class_attribute = (0, dom_utils_1.get_attribute)(node, "class");
        const classes = filterClasses((0, dom_utils_1.get_classes)(class_attribute), global_config);
        classes
            .filter((_class) => !(0, check_format_1.default)(format, _class))
            .forEach((_class) => report({
            code: "E011",
            position: class_attribute.value.loc,
            meta: {
                data: {
                    attribute: "class",
                    format: format,
                    value: _class
                }
            }
        }));
    }
}
exports.default = {
    name: RULE_NAME,
    validateConfig: (0, validate_option_1.create_list_value_validator)(RULE_NAME, ["none", "lowercase", "underscore", "dash", "camel", "bem"]),
    lint
};
