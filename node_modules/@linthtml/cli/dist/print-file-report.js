"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
// @ts-ignore
const table_layout_1 = tslib_1.__importDefault(require("table-layout"));
const messages_1 = require("@linthtml/linthtml/messages");
function print_position({ position: { start } }, maxLine, maxColumn) {
    const line = start.line.toString();
    const column = start.column.toString();
    return `${line.padStart(maxLine, " ")}:${column.padEnd(maxColumn, " ")}`;
}
function print_level({ severity }) {
    return `${{
        warning: "yellow warning",
        error: "red error"
    }[severity]}`;
}
function print_file_report(report) {
    console.log((0, chalk_1.default) `File: {underline ${report.fileName}}`);
    if (report.config_path) {
        console.log((0, chalk_1.default) `{blue Config file: {white.underline ${report.config_path}}}`);
    }
    if (report.preset) {
        console.log((0, chalk_1.default) `{blue Using preset: {white ${report.preset}}}`);
    }
    const maxLine = report.issues.reduce((max, cv) => Math.max(max, cv.position.start.line), -1).toString().length;
    const maxColumn = report.issues.reduce((max, cv) => Math.max(max, cv.position.start.column), -1).toString().length;
    const issues = report.issues.map((issue) => {
        const msg = (0, messages_1.renderIssue)(issue);
        const positionTxt = print_position(issue, maxLine, maxColumn);
        const level = print_level(issue);
        return {
            positions: (0, chalk_1.default) `{gray ${positionTxt}}`,
            level: (0, chalk_1.default) `{${level}}`,
            msg,
            rule: (0, chalk_1.default) `{gray ${issue.rule}}`
        };
    });
    const table = new table_layout_1.default(issues, { noTrim: true });
    console.log(table.toString());
}
exports.default = print_file_report;
