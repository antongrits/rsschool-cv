"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint-disable no-console */
const fs_1 = tslib_1.__importDefault(require("fs"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const ora_1 = tslib_1.__importDefault(require("ora"));
const meow_1 = tslib_1.__importDefault(require("meow"));
const utils_1 = require("./utils");
const check_invalid_cli_options_1 = tslib_1.__importDefault(require("./check-invalid-cli-options"));
const print_file_report_1 = tslib_1.__importDefault(require("./print-file-report"));
const init_1 = tslib_1.__importDefault(require("./commands/init"));
const print_config_1 = tslib_1.__importDefault(require("./commands/print-config"));
const print_errors_1 = tslib_1.__importDefault(require("./print-errors"));
// @ts-ignore
const linthtml_1 = tslib_1.__importDefault(require("@linthtml/linthtml"));
const cliOptions = {
    help: (0, chalk_1.default) `
    Usage: linthtml [options] file.html [glob] [dir]

    {cyan.underline Configuration:}

      --config               Use this configuration, overriding .linthtmlrc config options if present

    {cyan.underline Output: }

      --color, --no--color  Force enabling/disabling of color

    {cyan.underline Miscellaneous:}

      --init                          Generate a default configuration file
      -h, --help                      Show help
      -v, --version                   Output the version number
      --print-config [path::String]   Print the configuration for the given file
  `,
    flags: {
        config: {
            type: "string",
            alias: "c"
        },
        color: {
            // no need to add `no-color` it"s automatic same for colorization too (no need to do anything)
            type: "boolean",
            default: true
        },
        printConfig: {
            type: "string"
        },
        init: {
            type: "boolean"
        },
        help: {
            alias: "h",
            type: "boolean"
        },
        version: {
            alias: "v",
            type: "boolean"
        }
    }
};
function cli(argv) {
    // TODO: Fix?
    // @ts-ignore
    cliOptions.argv = argv;
    // @ts-ignore
    const cli = (0, meow_1.default)(cliOptions);
    const invalidOptionsMessage = (0, check_invalid_cli_options_1.default)(cliOptions.flags, cli.flags);
    if (invalidOptionsMessage) {
        process.stderr.write(invalidOptionsMessage);
        return (0, utils_1.exitProcess)();
    }
    // TODO: convert to command and throw deprecation warning for flag
    // Add format flag (json, yaml, rc) to command
    // Add legacy flag to command
    if (cli.flags.init) {
        return (0, init_1.default)().then(() => (0, utils_1.exitProcess)());
    }
    if (cli.flags.printConfig !== undefined) {
        // convert to command and throw deprecation warning for flag
        return (0, print_config_1.default)(cli.flags.printConfig);
    }
    // use config_path if provided or search local config file
    if (cli.flags.help || cli.flags.h || argv.length === 0) {
        cli.showHelp();
    }
    return lint(cli.input, cli.flags.config);
}
exports.default = cli;
// @ts-ignore
async function lint(input, config_path) {
    let files_linters = [];
    const searchSpinner = (0, ora_1.default)("Searching for files").start();
    try {
        files_linters = await linthtml_1.default.create_linters_for_files(input, config_path);
        searchSpinner.succeed(`Found ${files_linters.length} files`); // deal with 0
    }
    catch (error) {
        searchSpinner.fail();
        (0, print_errors_1.default)(error);
        return (0, utils_1.exitProcess)(utils_1.EXIT_CODE_ERROR);
    }
    const lintSpinner = (0, ora_1.default)("Analysing files");
    try {
        lintSpinner.start();
        let reports = await Promise.all(files_linters.map(lintFile));
        reports = reports.filter((report) => report.issues.length > 0);
        lintSpinner.succeed("Files analyzed");
        printReports(reports);
    }
    catch (error) {
        lintSpinner.fail();
        console.log();
        console.log((0, chalk_1.default) `An error occured while analysing {underline ${error.fileName}}`);
        console.log();
        (0, print_errors_1.default)(error);
        console.log((0, chalk_1.default) `{red ${error.message}}`);
        return (0, utils_1.exitProcess)(utils_1.EXIT_CODE_ERROR);
    }
}
function printReports(reports) {
    console.log("");
    reports.forEach(print_file_report_1.default);
    if (reports.length > 0) {
        const issues = reports
            .filter((report) => report.issues.length > 0)
            .reduce((acc, { issues }) => [...acc, ...issues], []);
        const errorsCount = issues.reduce((count, issue) => (issue.severity === "error" ? count + 1 : count), 0);
        const warningCount = issues.reduce((count, issue) => (issue.severity === "warning" ? count + 1 : count), 0);
        const problemsCount = errorsCount + warningCount;
        if (errorsCount > 0) {
            console.log((0, chalk_1.default) `{red ‚úñ ${problemsCount} ${problemsCount > 1 ? "problems" : "problem"} (${errorsCount} ${errorsCount > 1 ? "errors" : "error"}, ${warningCount} ${warningCount > 1 ? "warnings" : "warning"})}`);
            return (0, utils_1.exitProcess)(utils_1.EXIT_CODE_ERROR);
        }
        console.log((0, chalk_1.default) `{yellow ‚úñ ${problemsCount} ${problemsCount > 1 ? "problems" : "problem"} (${errorsCount} ${errorsCount > 1 ? "errors" : "error"}, ${warningCount} ${warningCount > 1 ? "warnings" : "warning"})}`);
    }
    else {
        console.log("‚ú®  There's no problem, good job üëè");
    }
    return (0, utils_1.exitProcess)();
}
// TODO imporve
async function lintFile({ file_path, linter, config_path, preset }) {
    try {
        const file_content = fs_1.default.readFileSync(file_path, "utf8");
        const issues = await linter.lint(file_content);
        return {
            fileName: file_path,
            issues,
            config_path,
            preset
        };
    }
    catch (error) {
        error.fileName = file_path;
        throw error;
    }
}
