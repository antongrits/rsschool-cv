"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const linthtml_1 = tslib_1.__importDefault(require("@linthtml/linthtml"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
const default_config = {
    maxerr: false,
    "text-ignore-regex": false,
    "raw-ignore-regex": false,
    "attr-name-ignore-regex": false,
    "id-class-ignore-regex": false,
    "line-max-len-ignore-regex": false,
    rules: {}
};
const GENERATORS = {
    JavaScript: {
        name: ".linthtmlrc.js",
        generate_content: (content) => `module.exports = ${JSON.stringify(content, null, "\t")}`
    },
    JSON: {
        name: ".linthtmlrc.json",
        generate_content: (content) => JSON.stringify(content, null, "\t")
    },
    YAML: {
        name: ".linthtmlrc.yaml",
        generate_content: (content) => js_yaml_1.default.dump(content)
    }
};
async function init_command() {
    const response = await inquirer_1.default.prompt([
        {
            type: "list",
            name: "format",
            message: "What format do you want your config file to be in?",
            default: "Javascript",
            choices: ["JavaScript", "YAML", "JSON"]
        },
        {
            type: "list",
            name: "legacy",
            message: "Do you want to use the new config format or the legacy?",
            choices: [
                {
                    name: "New format",
                    value: false
                },
                {
                    name: "Legacy (inherited from HTMLLint)",
                    value: true
                }
            ]
        }
    ]);
    const config_file = GENERATORS[response.format];
    console.log();
    if (response.legacy) {
        fs_1.default.writeFileSync(config_file.name, config_file.generate_content(linthtml_1.default.presets.default), "utf8");
    }
    else {
        fs_1.default.writeFileSync(config_file.name, config_file.generate_content(default_config), "utf8");
        console.log((0, chalk_1.default) `⚠️ {yellow The new format does not provide default configurations for rules}`);
    }
    console.log((0, chalk_1.default) `Successfully created {blue ${config_file.name}} file in {underline ${process.cwd()}}`);
}
exports.default = init_command;
