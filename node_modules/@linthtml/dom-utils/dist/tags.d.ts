import { CharValue, Element, Node, NodeAttribute, Comment, Text, ProcessingInstruction } from "./dom_elements";
/**
 * Check if a node is self closed or not (`<hr />, <input ... />, <foo />`)
 */
declare function is_self_closing(node: Element): boolean;
/**
 * Check whether the given tag has an attribute with the given
 * name.
 */
declare function has_attribute(node: Element, attribute_name: string): boolean;
/**
 * Check whether the given tag has a non-empty attribute with the given
 * name. Count `""` as a non-empty attribute value only if optional
 * parameter allow_null is true
 */
declare function has_non_empty_attribute(node: Element, attribute_name: string, allow_null?: boolean): boolean;
/**
 * Get an attribute of a node element
 */
declare function get_attribute(node: Element, attribute_name: string): NodeAttribute | null;
/**
 * Get the value of an attribute for a specified node element
 */
declare function attribute_value(node: Element, attribute_name: string): CharValue | null;
/**
 * Check whether an attribute has a value or not
 */
declare function attribute_has_value(node: Element, attribute_name: string, value_to_check: string | RegExp): boolean;
/**
 * Check if a node is an Element node (div, span,... + style and script)
 */
declare function is_tag_node(node: Node): node is Element;
/**
 * Check if a node is a Text node
 */
declare function is_text_node(node: Node): node is Text;
/**
 * Check if a node is a Comment node (`<!-- a comment -->`)
 */
declare function is_comment_node(node: Node): node is Comment;
declare function is_directive_node(node: Node): node is ProcessingInstruction;
/**
 * Extract all html class for the class attribute
 */
declare function get_classes(class_attribute: NodeAttribute): string[];
/**
 * Return the name of a node (Comment, Text node, div, span...)
 */
declare function node_tag_name(node: Node): string;
/**
 * Check if a node has a parent node
 */
declare function has_parent_node(node: Node): node is Node & {
    parent: Node;
};
export { has_non_empty_attribute, attribute_value, is_tag_node, is_text_node, is_comment_node, is_directive_node, is_self_closing, get_attribute, has_attribute, attribute_has_value, get_classes, node_tag_name, has_parent_node };
//# sourceMappingURL=tags.d.ts.map